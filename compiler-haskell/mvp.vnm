$List<element> = Empty() | Prepend(head: element, tail: List<element>)
$Result<failure, success> = Failure(value: failure) | Success(value: success)

id<a>(var: a): a = var
pickFirst<a, b>(var1: a, var2: b): a = id(var1)
pickSecond<a, b>(var1: a, var2: b): b = pickFirst(var2, var1)
const<a, b>(value: b): (a)b =
    let dummy(ignored: a): b = value
    in dummy
makeAdder(n: Int): (Int)Int =
    let adder(m: Int): Int = n + m
    in adder
apply<a, b>(function: (a)b, value: a): b = function(value)
reverseApply<a, b>(value: a, function: (a)b): b = function(value)
flip<a, b, c>(function: (a, b)c): (b, a)c =
    let flipped(second: b, first: a): c = function(first, second)
    in flipped
reverseApply2 = flip(apply)
pickSecond2 = flip(pickFirst)
compose<a, b, c>(first: (a)b, second: (b)c): (a)c =
    let composition(value: a): c = second(first(value))
    in composition
roll(result: Int): String =
    if result == 20 then
        "Critical hit!"
    else
        "Regular hit"
fn = apply(const, 4)
fn2 = const(4)
$app = fn("Hello!")
$app = reverseApply2(8, id)

$app = apply(flip(compose)(roll, makeAdder(pickSecond("Hello!", 8))), 12)

$testList = Prepend(1, Prepend(2, Prepend(3, Empty())))

$[
range(start: Int, end: Int): List<Int> =
    if start == end + 1 then
        Empty()
    else
        Prepend(start, range(start + 1, end))
testList = range(1, 8)
map<input, output>(function: (input)output, list: List<input>): List<output> =
    case list of
        Empty -> list
        Prepend -> Prepend(function(list.head), map(function, list.tail))
foldLeft<element, result>(function: (result, element)result, accumulator: result, list: List<element>): result =
    case list of
        Empty -> accumulator
        Prepend ->
            let next = function(accumulator, list.head)
            in foldLeft(function, next, list.tail)
reverse<element>(list: List<element>): List<element> =
    let reverseInner(accumulator: List<element>, remaining: List<element>): List<element> =
        case remaining of
            Empty -> accumulator
            Prepend -> reverseInner(Prepend(remaining.head, accumulator), remaining.tail)
    in reverseInner(Empty(), list)
betterReverse<element>(list: List<element>): List<element> =
    foldLeft(flip(Prepend), Empty(), list)
biggerTestList = map(makeAdder(4), testList)
reversedList = reverse(biggerTestList)
add(n: Int, m: Int): Int = n + m
sum = foldLeft(add, 0, reversedList)
app = sum

$[
b = a
a = 5 + 7
c = "hello"
e = 'f'
id(var: String): String = var
g = id("Hello!")

fibonacci(n: Int): Int =
    if n == 0 then
        0
    else if n == 1 then
        1
    else
        fibonacci(n - 1) + fibonacci(n - 2)

result = fibonacci(11)

isOdd(n: Int): Int =
    if n == 0 then
        0
    else
        isEven(n - 1)

isEven(n: Int): Int =
    if n == 0 then
        1
    else
        isOdd(n - 1)

result2 = isOdd(26)

fn = makeAdder(4)
result3 = fn(12)
