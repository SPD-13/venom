a = 4
b = a + 1

$[

a() = b

c() =
    let b = 6
    in a()

result = c()

makeAdder(n) =
    let adder(m) = n + m
    in adder

fn = makeAdder(4)
result2 = fn(12)

fibonacci(n) =
    if n == 0 then
        0
    else if n == 1 then
        1
    else
        fibonacci(n - 1) + fibonacci(n - 2)

result3 = fibonacci(11)

$ 4
result4 = d
d = 4

$ Does not resolve
test() =
    result5
result5 = test()

$ Does not resolve
result6 = result6

$ Illegal?
result7 = 1
result7 = 2
$[ $]
$ Does not resolve
test() =
    result8
result8 = test

$ Resolves (recursion)
test() =
    result9()
result9 = test

$ Does not resolve
result10 = result11
result11 = result10

$ Resolves (recursion)
result12() =
    result13()
result13() = 
    result12()

$ RuntimeError / TypeCheck
result14 = 8()

$]
