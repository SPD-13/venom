Chain '(' and '<' lexing right after parsing value symbol before going back to main loop so I can keep whitespace context
    Different uses of parens (grouping VS function calls) and '<' (less than VS generics)
Design the parser so that I can ignore all newlines and indentation?
Compressing binary output and decompressing in Javascript?
Check Elm behaviour for: / 0, head
Research non-empty lists VS safety
Peek / match / consume with state monad for parser
Error handling / expect
Assume tabs are 4 columns for token position?
In panic mode, drop tokens until next "=" and assume some default string as the bind target (if type checker isn't run)
Are L-Values valid expressions? (type annotations in function signatures)
Fail fast VS sane defaults?
Let in VS where?
Typechecked JSX-like syntax for html?
Different AST node for short-circuiting functions
New assignment syntax ("=!" or something) for lazy-evaluated parameters ("if" and boolean operators)
S-Expressions useful for AST manipulation?
Functions with parameters already passed in (e.g. "+(2, 4)!") as a way to do lazy evaluation?
Are checked exceptions with IDE support good enough?
Allow scope shadowing? No.
False VS False()
Function equality?
Generalize traversal of the AST with Traversable typeclass or something?
Local "mutability" / redeclaration allowed or not (in Haskell?)
Extensible record types?
"Skip" scopes (exceptions / subscriptions)?
Why "undefined" exists in Haskell?
Why type inference is not decidable in Haskell?
Shadowing for type variables? It's probable fine
What the fuck is "fix"
Local state VS explicit passing of global state (component system for less boilerplater / Web Components?)
Is it possible to use type checking results in the interpreter (model valid types, e.g. "BoolExpr")?
"=>" instead of just "=" in record functions to update field based on current value
Low priority for pipe operator (expression |> Debug.log)
Support binding to underscore?
Evaluate dependencies when creating a closure? Smaller environments to store in closures
Minimal depency evaluation (start from "in" and traverse "let" bindings as required)
    VS Find resolvable order for bindings in type checker and evaluate sequentially
Lambda Lifting VS Closure Conversion
Recursive constants interpreted as lazily evaluated infinite structures
Recursion 1:
    Keep current environment during function call but overwrite with closure and parameters
    Omit recursive functions from closures (assume they will be in the current environment)
    Tag recursive functions with their original name and make sure it's in the environment (optionally rename current variable)
Recursion 2:
    Mutable environments somehow so I don't need to evaluate the function body / free variables?
    Closure environment pointing to itself
    STRef (or maybe IORef)?
Recursion 3:
    Rewrite recursive functions / calls using fix / Y combinator -> Inefficient
Recursion 4:
    Only put unevaluated expressions in closures?
Think of (implement?) closures as pre-partially applied functions
Closures VS rewriting free variables with current values in function expressions (same for partial application)
Research defunctionalization
Treat global (top-level) variables differently (always evaluate eagerly?)
Venomous: Implement mutability but no looping constructs (to limit its usage)
Find a clean pattern for AST traversal with an accumulator
Lazy evaluation of function arguments
Extending union types with new values (e.g. adding null value) for cleaner pattern matching (see parser e.g. '[Equals]')
Shadowing prelude / standard library?
Visualize state + previous messages/states in browser console
Consider all uses of a variable (even declaration) to be constraints then solve at the end of the block
Evaluate Elm VS Reflex VS Halogen VS CycleJS (group state dependencies instead of event effects)
Check inference of record types in Elm
Study OCaml syntax for partial application
Find ways to fix "double indentation" (i.e. replace "let" with blocks)
Error/panic syntax for "dummy" cases
Replace "_ -> do reportError" blocks in parser with some kind of "expect" construct
Use "Maybe _" in parser as error return types instead of "None" and "TUndefined"
Automatic derivation / default behaviour for common typeclasses
