program > type_declaration* binding*

type_declaration > DATA_TYPE EQUALS constructor

constructor > DATA_TYPE LEFT_PAREN parameters? RIGHT_PAREN

binding > (function | constant) EQUALS expression

function > IDENTIFIER LEFT_PAREN parameters? RIGHT_PAREN COLON type_annotation

parameters > parameter (COMMA parameter)*

parameter > IDENTIFIER COLON type_annotation

type_annotation > BASE_TYPE | function_annotation

function_annotation > LEFT_PAREN param_types? RIGHT_PAREN type_annotation

param_types > type_annotation (COMMA type_annotation)*

constant > IDENTIFIER

expression > logic_or

logic_or > logic_and (OR logic_and)*

logic_and > equality (AND equality)*

equality > addition ((EQUALITY | INEQUALITY) addition)*

addition > multiplication ((PLUS | MINUS) multiplication)*

multiplication > call (TIMES call)*

call > primary ((LEFT_PAREN arguments? RIGHT_PAREN) | (DOT IDENTIFIER))*

arguments > expression (COMMA expression)*

primary
    > LET binding* IN expression
    | IF expression THEN expression ELSE expression
    | CASE expression OF case+
    | LEFTPAREN expression RIGHTPAREN
    | LITERAL
    | IDENTIFIER
    | DATA_TYPE

case > DATA_TYPE ARROW expression
